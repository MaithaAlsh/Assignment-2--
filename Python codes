https://colab.research.google.com/drive/1xtCTHQ0HgRvqgNfIHS0YlLuX91cDH-ho?authuser=0#scrollTo=WYtUPwFu8VA5

from datetime import date
from enum import Enum

class MembershipType(Enum):
    BASIC = 1
    PREMIUM = 2

class TicketType(Enum):
    REGULAR = 1
    DISCOUNT = 2
    SPECIAL_OFFER = 3

class Visitor:
    def __init__(self, name: str, age: int, membership: 'Membership'):
        self.name = name
        self.age = age
        self.membership = membership

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_membership(self):
        return self.membership

class Membership:
    def __init__(self, membership_type: MembershipType, fee: float, expiration_date: date):
        self.membership_type = membership_type
        self.fee = fee
        self.expiration_date = expiration_date

    def get_type(self):
        return self.membership_type

    def get_fee(self):
        return self.fee

    def get_expiration_date(self):
        return self.expiration_date

    def renew(self):
        pass  # Implement your renewal logic

class Ticket:
    def __init__(self, id: int, date: date, ticket_type: TicketType, visitor: 'Visitor', price: float):
        self.id = id
        self.date = date
        self.ticket_type = ticket_type
        self.visitor = visitor
        self.price = price

    def get_id(self):
        return self.id

    def get_date(self):
        return self.date

    def get_type(self):
        return self.ticket_type

    def get_visitor(self):
        return self.visitor

    def get_price(self):
        return self.price

    def set_price(self, new_price: float):
        self.price = new_price

class Discount(TicketType):
    def __init__(self, type_name: str, price: float, discount_name: str, discount_percentage: float):
        super().__init__(TicketType.DISCOUNT)
        self.type_name = type_name
        self.price = price
        self.discount_name = discount_name
        self.discount_percentage = discount_percentage

    def get_type_name(self):
        return self.type_name

    def get_price(self):
        return self.price

    def get_discount_name(self):
        return self.discount_name

    def get_discount_percentage(self):
        return self.discount_percentage

class SpecialOffer(TicketType):
    def __init__(self, type_name: str, price: float, offer_name: str, start_date: date, end_date: date):
        super().__init__(TicketType.SPECIAL_OFFER)
        self.type_name = type_name
        self.price = price
        self.offer_name = offer_name
        self.start_date = start_date
        self.end_date = end_date

    def get_type_name(self):
        return self.type_name

    def get_price(self):
        return self.price

    def get_offer_name(self):
        return self.offer_name

    def get_start_date(self):
        return self.start_date

    def get_end_date(self):
        return self.end_date
# feedback and evaluation 
from datetime import date

class Membership:
    def __init__(self, id: int, name: str, expiration_date: date):
        self.id = id
        self.name = name
        self.expiration_date = expiration_date

class Visitor:
    def __init__(self, id: int, name: str, age: int, membership: 'Membership'):
        self.id = id
        self.name = name
        self.age = age
        self.membership = membership

    def get_id(self):
        return self.id

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_membership(self):
        return self.membership

class Exhibit:
    def __init__(self, id: int, name: str):
        self.id = id
        self.name = name

    def get_id(self):
        return self.id

    def get_name(self):
        return self.name

class Feedback:
    def __init__(self, id: int, visitor: 'Visitor', exhibit: 'Exhibit', rating: int, comment: str):
        self.id = id
        self.visitor = visitor
        self.exhibit = exhibit
        self.rating = rating
        self.comment = comment

    def get_id(self):
        return self.id

    def get_visitor(self):
        return self.visitor

    def get_exhibit(self):
        return self.exhibit

    def get_rating(self):
        return self.rating

    def get_comment(self):
        return self.comment

class Event:
    def __init__(self, id: int, name: str):
        self.id = id
        self.name = name

    def get_id(self):
        return self.id

    def get_name(self):
        return self.name

class Survey:
    def __init__(self, id: int, name: str, questions: List['Question']):
        self.id = id
        self.name = name
        self.questions = questions

    def get_id(self):
        return self.id

    def get_name(self):
        return self.name

    def get_questions(self):
        return self.questions

class Question:
    def __init__(self, id: int, survey: 'Survey', text: str):
        self.id = id
        self.survey = survey
        self.text = text

    def get_id(self):
        return self.id

    def get_survey(self):
        return self.survey

    def get_text(self):
        return self.text
# Other typical cases 
from datetime import datetime
from enum import Enum

class LocationType(Enum):
    INDOOR = 1
    OUTDOOR = 2

class Location:
    def __init__(self, name: str, location_type: LocationType):
        self.name = name
        self.location_type = location_type

class Artwork:
    def __init__(self, title: str, artist: str, date_of_creation: datetime, historical_significance: str, size: str, location: Location):
        self.title = title
        self.artist = artist
        self.date_of_creation = date_of_creation
        self.historical_significance = historical_significance
        self.size = size
        self.location = location

class Exhibition:
    def __init__(self, name: str, location: Location, start_date: datetime, end_date: datetime):
        self.name = name
        self.location = location
        self.start_date = start_date
        self.end_date = end_date
        self.artworks = []

    def add_artwork(self, artwork: Artwork):
        self.artworks.append(artwork)

class Event:
    def __init__(self, name: str, location: Location, start_date: datetime, end_date: datetime, ticket_price: float):
        self.name = name
        self.location = location
        self.start_date = start_date
        self.end_date = end_date
        self.ticket_price = ticket_price
        self.tickets = []

    def add_ticket(self, ticket: Ticket):
        self.tickets.append(ticket)

class Ticket:
    def __init__(self, visitor: Visitor, event: Event, purchase_date: datetime, price: float):
        self.visitor = visitor
        self.event = event
        self.purchase_date = purchase_date
        self.price = price

class Visitor:
    def __init__(self, name: str, age: int, membership: Membership):
        self.name = name
        self.age = age
        self.membership = membership
        self.tickets = []

    def add_ticket(self, ticket: Ticket):
        self.tickets.append(ticket)

class Membership:
    def __init__(self, id: str, member: Visitor, start_date: datetime, end_date: datetime, membership_type: MembershipType, discount: float):
        self.id = id
        self.member = member
        self.start_date = start_date
        self.end_date = end_date
        self.membership_type = membership_type
        self.discount = discount

class MembershipType(Enum):
    BASIC = 1
    PREMIUM = 2

# Example usage

# Create location
location = Location(name='Main Hall', location_type=LocationType.INDOOR)

# Create artwork
artwork = Artwork(title='Mona Lisa', artist='Leonardo da Vinci', date_of_creation=datetime(1503, 8, 15), historical_significance='Iconic portrait', size='77cm x 53cm', location=location)

# Create exhibition
exhibition = Exhibition(name='Renaissance Masters', location=location, start_date=datetime(2023, 1, 1), end_date=datetime(2023, 3, 31))
exhibition.add_artwork(artwork)

# Create event
event = Event(name='Artist Talk', location=location, start_date=datetime(2023, 2, 15), end_date=datetime(2023, 2, 15), ticket_price=25.0)

# Create visitor
visitor = Visitor(name=Maitha , age=30, membership=Membership(id='ABC123', member=visitor, start_date=datetime(2022, 1, 1), end_date=datetime(2023, 12, 31), membership_type=MembershipType.PREMIUM, discount=0.1))

# Create ticket
ticket = Ticket(visitor=visitor, event=event, purchase_date=datetime(2023, 2, 14), price=25.0)

# Add ticket to visitor
visitor.add_ticket(ticket)

# Add ticket to event
event.add_ticket(ticket)
